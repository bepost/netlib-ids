using System.CodeDom.Compiler;
using System.Linq;
using System.Reflection;
using Fujiberg.Coder.CSharp;

namespace Fujiberg.Identifiers;

internal static class SourceHelpers
{
    private static string? _toolName;
    private static string? _toolVersion;

    public static Attribution GeneratedAttribution =>
        new(typeof(GeneratedCodeAttribute)) {Arguments = [new StringLiteral(ToolName), new StringLiteral(ToolVersion)]};

    public static Comment HeaderComment =>
        new(
            $"""
             -----------------------------------------------------------------------------
             <auto-generated>
                
                This code was generated by {ToolName} v{ToolVersion}
             
                Changes to this file may cause incorrect behavior and will be lost if
                the code is regenerated.

             </auto-generated>
             -----------------------------------------------------------------------------
             """
        );

    internal static bool Repeatable { get; set; }

    private static string ToolName =>
        _toolName ??= Assembly.GetExecutingAssembly()
            .GetName()
            .Name;

    private static string ToolVersion =>
        _toolVersion ??= Repeatable
            ? "0.0.0-test"
            : Assembly.GetExecutingAssembly()
                  .GetCustomAttributes<AssemblyInformationalVersionAttribute>()
                  .FirstOrDefault()
                  ?.InformationalVersion ??
              Assembly.GetExecutingAssembly()
                  .GetName()
                  .Version.ToString();

    public static string GetOutputFileName(QualifiedName name)
    {
        var typeName = name.ToCode(useGlobalPrefix:false);
        typeName = typeName.Replace("<", "__")
            .Replace(">", "");

        return $"{typeName}.g.cs";
    }
}
