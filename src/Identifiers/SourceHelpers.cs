using System.Linq;
using System.Reflection;
using Fujiberg.Coder.CSharp;

namespace Fujiberg.Identifiers;

public static class SourceHelpers
{
    public static string GeneratedAttribute =>
        $"""
         [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{ToolName}", "{ToolVersion}")]
         """;

    public static Attribution GeneratedAttribution =>
        Attribution.Create(
            "System.CodeDom.Compiler.GeneratedCodeAttribute",
            StringLiteral.Create(ToolName),
            StringLiteral.Create(ToolVersion)
        );

    public static string Header =>
        $"""
         //------------------------------------------------------------------------------
         // <auto-generated>
         //     This code was generated by {ToolName} v{ToolVersion}
         //
         //     Changes to this file may cause incorrect behavior and will be lost if
         //     the code is regenerated.
         // </auto-generated>
         //------------------------------------------------------------------------------

         #nullable enable

         """;

    public static Comment HeaderComment =>
        new(
            $"""
             -----------------------------------------------------------------------------
             <auto-generated>
                 This code was generated by {ToolName} v{ToolVersion}
                 
                 Changes to this file may cause incorrect behavior and will be lost if
                 the code is regenerated.
             </auto-generated>
             -----------------------------------------------------------------------------
             """
        );

    internal static bool Repeatable { get; set; }

    private static string ToolName =>
        Assembly.GetExecutingAssembly()
            .GetName()
            .Name;

    private static string ToolVersion =>
        Repeatable
            ? "0.0.0-test"
            : Assembly.GetExecutingAssembly()
                  .GetCustomAttributes<AssemblyInformationalVersionAttribute>()
                  .FirstOrDefault()
                  ?.InformationalVersion ??
              Assembly.GetExecutingAssembly()
                  .GetName()
                  .Version.ToString();

    public static string GetOutputFileName(string nameSpace, string typeName)
    {
        typeName = typeName.Replace("<", "__")
            .Replace(">", "");

        if (nameSpace == "")
            return typeName + ".g.cs";

        return $"{nameSpace}.{typeName}.g.cs";
    }
}
